/*
  Energy on SD card datalogger

 The circuit:
 * Voltage on analog input A0 through a resistor ladder 
 * Current on analog input A1 through ACS712 current sensor
 * Display on 128*32 OLED graphic Display SSD1306 via I2C
 * Debug output via serial link
 * SD card attached to SPI bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS D pin 4 (for MKRZero SD: SDCARD_SS_PIN)

 created  18 dec 2017
 by J. WEISS


 */
#define USE_DISPLAY
#define USE_SD

#ifdef USE_SD
 #include <SD.h>
 const int chipSelect = 4;
 bool SD_Card_OK =false;
#endif

#ifdef USE_DISPLAY
 #include <SSD1306_OLED_TXT.h>
 SSD1306_OLED_TXT display(32);
// #include <Adafruit_SSD1306.h>
// Adafruit_SSD1306 display(3);
 
 #if (SSD1306_LCDHEIGHT != 32)
  #error(F("Height incorrect, please fix Adafruit_SSD1306.h!"));
 #endif
#endif



const float ADC_Gain = 5.0 / 1024.0;// (VoltageReference / (2^^10)) 0 - 5V range with 10 bits
//const float VoltageDivisor = 1./(10.+1.); //R2 / (R1 + R2)
const float VoltageDivisor = 1.; //R2 / (R1 + R2)
const float Current_Gain = 1000. / 66.0; // 66 mV/A

float Voltage;
float Current;
float Watts;
float TotalAmperes;
float AmpereHour;
float Energy;
unsigned long currentMillis;
unsigned long currentSeconds;

unsigned long previousMillis = 0; // will store last time LED was updated
// the follow variables is a long because the time, measured in miliseconds,
// will quickly become a bigger number than can be stored in an int.
long intervalle = 1000; // Acquisition interval (milliseconds)

#ifdef USE_SD
void SD_Record(String *Message) {
   File dataFile = SD.open("Energy.csv", FILE_WRITE);
   // if the file is available, write to it:
   if (dataFile) {
      //Serial.println(Message);
      dataFile.println(*Message);
      //dataFile.println("Coucou");
      dataFile.close();
      // print to the serial port too:
      //Serial.println(dataString);
   }
   // if the file isn't open, pop up an error:
   else {
      Serial.println(F("error opening file"));
   }
}
#endif
void setup()   {                
  Serial.begin(115200);
  #ifdef USE_SD
  Serial.print(F("Initializing SD card..."));

  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println(F("Card failed, or not present"));
  }
  else {
    SD_Card_OK = true;
    Serial.println(F("card initialized."));
    delay(200);
    if (SD_Card_OK) SD_Record(&String(F("Seconds, Current, Voltage, Power, Energy")));
  }
  #endif
  #ifdef USE_DISPLAY
   // SSD1306 initialization : by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
   display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3C (for the 128x32)
   // init done
  
   // Show image buffer on the display hardware.
   // Since the buffer is intialized with an Adafruit splashscreen
   // internally, this will display the splashscreen.
   display.display();
   display.setTextSize(1);
   display.setTextColor(WHITE); 
   delay(500);
  #endif    
}


void loop() {
  currentMillis = millis();
  if(currentMillis - previousMillis > intervalle) {
    previousMillis = currentMillis;
    Voltage = analogRead(0)*ADC_Gain*VoltageDivisor;
    Current =(analogRead(1)*ADC_Gain - 2.5)*Current_Gain; // offset voltage is 2.5v

    currentSeconds=currentMillis/1000; // convert milliseconds to seconds

    TotalAmperes=TotalAmperes+Current; // calculate total Amperes since origin
    Watts =Voltage*Current; // power=voltage*current
    AmpereHour = (TotalAmperes/currentSeconds)/3600;
    Energy=(Watts*currentSeconds)/3600; //Watt-sec is again convert to Watt-Hr by dividing 1hr(3600sec)
    // energy=(watt*time)/(1000*3600); for reading in kWh

    Serial.print(F("Temps : ")); Serial.print(currentSeconds); Serial.print(F(" s     "));
    Serial.print(F("Voltage : ")); Serial.print(Voltage); Serial.print(F(" V     ")); Serial.print(F("CURRENT :")); Serial.print(Current); Serial.println(F(" A"));
    Serial.print(F("POWER :"));Serial.print(Watts);Serial.print(F(" Watt    "));Serial.print(F("Energy :"));Serial.print(Energy);Serial.println(F(" Watt-Hour"));

    #ifdef USE_DISPLAY
     display.clearDisplay();
     display.setCursor(0,0);
     //display.println(F("Energy meter by JW"));
     display.print(Voltage,1);display.print(F(" V "));display.print(Watts,1);display.print(F(" W   \n")); 
     display.setCursor(80-2*6*String(Current).length(),8+1);
     display.setTextSize(2);
     display.print(Current);
     display.setCursor(display.getCursorX(),16+1);
     display.setTextSize(1);display.println(F(" A "));
     display.setCursor(0,8+16+1);
     display.print(AmpereHour*1000,0); display.println(F(" mAh "));
     display.print(Energy); display.println(F(" Wh "));
     display.display();
    #endif

    // make a string for assembling the data to log:
    String dataString = String(currentSeconds);dataString += ";";
    dataString += String(Current);dataString += ";";
    dataString += String(Voltage);dataString += ";";
    dataString += String(Watts);dataString += ";";
    dataString += String(Energy);dataString += "\n";

    Serial.print(Current);Serial.println(dataString);
    #ifdef USE_SD
     if (SD_Card_OK) SD_Record(&dataString);
     //if (SD_Card_OK) SD_Record(&String("Go"));
    #endif
  }
}

